'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var wrapTypeform = document.getElementById('typeform');
var state = [];
var nextQueastionAble = true;
var currentIdGlobal = void 0;
// Generate array from 'a' to 'z'
var _ = 'abcdefghijklmnopqrstuvwxyz';
var __ = [].concat(_toConsumableArray(_));

// Get size of form and calculate min and max value
var heightTypeform = wrapTypeform.getBoundingClientRect().height;
var params = {
  heightTypeform: heightTypeform,
  answers: document.querySelectorAll('.question .answer'),
  min: (heightTypeform - 200) / 2,
  max: heightTypeform - (heightTypeform - 200) / 2,
  currentTop: wrapTypeform.scrollTop
};

// Create state from DOM
var createState = function createState(_ref, id) {
  var attributes = _ref.attributes,
      children = _ref.children;

  if (attributes['data-type'].value === 'question') {
    return {
      type: 'question',
      value: attributes['data-value'].value,
      dataType: attributes['data-input-type'].value,
      formData: attributes['data-form-value'].value,
      id: id.toString(),
      idDOM: 'tf-q-' + id
    };
  } else if (attributes['data-type'].value === 'group') {
    var group = [];
    var idS = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var element = _step.value;

        group.push(createState(element, id + __[idS]));
        idS++;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    ;

    return {
      type: 'group',
      value: attributes['data-value'].value,
      questions: group,
      id: id.toString()
    };
  };
};

var questions = wrapTypeform.children;

var id = 0;
var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = questions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var element = _step2.value;

    id++;
    state.push(createState(element, id));
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2.return) {
      _iterator2.return();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

;

// Remove old structure
wrapTypeform.innerHTML = '';

// Generate new DOM base on state

// Create DOM element for questions
var createQuestion = function createQuestion(_ref2) {
  var dataType = _ref2.dataType,
      type = _ref2.type,
      value = _ref2.value,
      id = _ref2.id,
      formData = _ref2.formData;

  var wrap = document.createElement('div');
  wrap.className = 'question empty';
  wrap.id = 'tf-q-' + id;

  var answer = void 0;
  switch (dataType) {
    case 'short-text':
      answer = '<input type="text" data-regex="' + dataType + '" data-form-value="' + formData + '" class="answer" />';
      break;
    case 'long-text':
      answer = '\n        <p class="hint">To add a paragraph, press SHIFT+ENTER</p>\n        <textarea class="answer" data-regex="' + dataType + '" data-form-value="' + formData + '"></textarea>\n      ';
      break;
    case 'email':
      answer = '<input type="text" data-regex="' + dataType + '" data-form-value="' + formData + '" class="answer" />';
      break;
    default:
      return '';
  };

  var title = '\n    <h2 class="question-title">\n      <span class="number">' + id + '</span>\n      ' + value + '\n     </h2>\n  ';
  var hintOK = '\n    <div class="hint-ok">\n      <p class="next">ok</p>\n      <span class="hint">press ENTER</span>\n    </div>\n  ';
  var hintError = '\n    <div class="hint-err">\n      <p id="text-error">Someting wrong!</p>\n    </div>\n  ';

  wrap.innerHTML = title + answer + hintOK + hintError;
  return wrap;
};

// Create DOM element for group
var createGroup = function createGroup(_ref3) {
  var value = _ref3.value,
      questions = _ref3.questions,
      id = _ref3.id;

  var groupElement = document.createElement('div');
  groupElement.className = 'group';
  var titleGroup = '\n    <h2 class="group-title">\n      <span class="number">' + id + '</span>\n      ' + value + '\n    </h2>\n  ';

  groupElement.innerHTML = titleGroup;

  questions.forEach(function (question, index) {
    var questionElement = createQuestion(question);
    groupElement.appendChild(questionElement);
  });

  return groupElement;
};

// Append top title for current group
var appendTitleCurrentGroup = function appendTitleCurrentGroup() {
  var titleGroup = document.createElement('div');
  titleGroup.className = 'current-group';
  wrapTypeform.appendChild(titleGroup);
  $('#typeform .current-group').hide();
};

appendTitleCurrentGroup();

// Append questions and groups
state.forEach(function (structure, index) {
  if (structure.type === 'question') wrapTypeform.appendChild(createQuestion(structure, index + 1, index + 1));else if (structure.type === 'group') wrapTypeform.appendChild(createGroup(structure, index + 1));
});

// Append number of done questions and control arrows - footer

var appendFooter = function appendFooter() {
  var footer = document.createElement('div');
  footer.className = 'typeform-footer';
  var contentOfFooter = '\n    <div class="content">\n      <div class="answers">\n        <span class="count-answers"></span>\n        <div class="count-line">\n          <div class="current"></div>\n        </div>\n      </div>\n      <div class="arrows">\n        <div class="arrow" id="prev-question">\n          <img src="img/icons/typeform-arrow-up.png" />\n        </div>\n        <div class="arrow" id="next-question">\n          <img src="img/icons/typeform-arrow-down.png" />\n        </div>\n      </div>\n    </div>\n  ';
  footer.innerHTML = contentOfFooter;
  wrapTypeform.appendChild(footer);
};
appendFooter();

var appendSubmitWindow = function appendSubmitWindow() {
  var submit = document.createElement('div');
  submit.className = 'submit';
  var content = '\n    <div>\n      <h2>Thank you!</h2>\n      <div class="buttons">\n        <div class="sbm-btn submit-button" id="submit-form">submit</div>\n        <div class="sbm-btn cancel-button" id="cancel-submit-form">cancel</div>\n      </div>\n    </div>\n  ';
  submit.innerHTML = content;
  wrapTypeform.appendChild(submit);
};
appendSubmitWindow();
$('#typeform .submit').hide();

// Validation input
var getRegex = function getRegex(type) {
  switch (type) {
    case 'email':
      return (/^([\w_\.\-\+])+\@([\w\-]+\.)+([\w]{2,10})+$/
      );
    default:
      return false;
  };
};

var answers = document.querySelectorAll('#typeform .answer');

var disableActive = function disableActive() {
  var activeInput = document.querySelector('#typeform .question.active');
  var activeGroup = document.querySelector('#typeform .group.active');
  if (activeInput) activeInput.classList.remove('active');

  if (activeGroup) activeGroup.classList.remove('active');
};

var copyTitleToTop = function copyTitleToTop(el) {
  var title = document.querySelector('#typeform .current-group');
  title.innerHTML = el.innerHTML;
  $(title).fadeIn(200);
};

var hideTitle = function hideTitle() {
  var title = document.querySelector('#typeform .current-group');
  $(title).fadeOut(200, function () {
    title.innerHTML = '';
  });
};

var updateAnsweredQuestions = function updateAnsweredQuestions() {
  var answers = document.querySelectorAll('#typeform .question .answer');
  var count = 0;
  answers.forEach(function (answer) {
    if (answer.value) count++;
  });
  var max = answers.length;
  var percent = 100 * count / max;
  var currentLine = document.querySelector('#typeform .typeform-footer .content .answers .count-line .current');
  currentLine.style.width = percent + '%';
  var currentNumber = document.querySelector('#typeform .typeform-footer .content .answers .count-answers');
  currentNumber.innerHTML = count + ' of ' + max + ' answered';
};
updateAnsweredQuestions();

var validationAllAnswersBeforeFinish = function validationAllAnswersBeforeFinish() {
  var answers = document.querySelectorAll('#typeform .answer');
  var empty = false;
  var valid = true;
  answers.forEach(function (answer) {
    if (answer.value) empty = true;

    var typeRegEx = answer.attributes['data-regex'].value;
    var regex = getRegex(typeRegEx);
    var input = answer.value;
    if (regex && input) if (!regex.test(input)) valid = false;
  });
  var groups = document.querySelectorAll('#typeform .group');

  var groupRequired = [];
  groups.forEach(function (group) {
    var f = false;
    var questions = group.querySelectorAll('.question');
    questions.forEach(function (q) {
      if (q.querySelector('.answer').value) f = true;
    });
    groupRequired.push(f);
  });

  return empty && valid && groupRequired.every(function (e) {
    return e;
  });
};

var finishForm = function finishForm() {
  var can = validationAllAnswersBeforeFinish();
  if (can) {
    $('#typeform > div:not(.submit)').fadeOut(200, function () {
      $('#typeform .submit').fadeIn(200);
    });
  } else {
    $('#typeform .notification').html('\n      <span class="notify">Make sure you fill all required fields.</span>\n    ');
    $('#typeform .notification').fadeIn(200);
  }
};

var submit = function submit() {
  var data = {};
  var answers = document.querySelectorAll('#typeform .answer');
  answers.forEach(function (item) {
    data[item.attributes['data-form-value'].value] = item.value;
    item.value = '';
  });

  // fetch("http://asd-team.com/public/asdfreelance/mail/contact_me.php", {
  //   type: "POST",
  //   data
  // })
  //   .then(res => console.log(res))
  //   .catch(err => console.error(err))

  $('#typeform .submit').fadeOut(200, function () {
    $('#typeform > div:not(.submit, .current-group)').show();
    $('#typeform').hide();
    document.getElementById('contact').style.height = 'auto';
    $('#contact .title').fadeIn(400);
    $('#contact .wrap-content').fadeIn(400);
  });
};

var submitFormButton = document.getElementById('submit-form');
submitFormButton.onclick = function () {
  submit();
};

var cancelSubmit = function cancelSubmit() {
  $('#typeform .submit').fadeOut(200, function () {
    $('#typeform > div:not(.submit, .current-group)').fadeIn(200, function () {
      goToCurrentQuestion();
    });
  });
};

var cancelSubmitFormButton = document.getElementById('cancel-submit-form');
cancelSubmitFormButton.onclick = function () {
  cancelSubmit();
};

var goToNextQuestion = function goToNextQuestion() {
  if (nextQueastionAble) {
    var currentId = document.querySelector('#typeform .question.active').id;
    var _questions = document.querySelectorAll('#typeform .question');
    var nextId = currentId;
    _questions.forEach(function (element, index) {
      var id = element.id;
      if (id === currentId) nextId = _questions[index + 1] ? _questions[index + 1].id : false;
    });
    if (nextId) {
      var topToNext = $('#' + nextId).position().top;

      var scrollTop = nextId !== _questions[_questions.length - 1].id ? topToNext - params.min + params.currentTop : wrapTypeform.scrollHeight;

      $(wrapTypeform).animate({
        scrollTop: scrollTop
      }, 200);
      params.currentTop = scrollTop;
    } else {
      finishForm();
    };
    currentIdGlobal = nextId;
    updateAnsweredQuestions();
  }
};

var goToPrevQuestion = function goToPrevQuestion() {
  if (nextQueastionAble) {
    var currentId = document.querySelector('.question.active').id;
    var _questions2 = document.querySelectorAll('#typeform .question');
    var prevId = currentId;
    _questions2.forEach(function (element, index) {
      var id = element.id;
      if (id === currentId) prevId = _questions2[index - 1] ? _questions2[index - 1].id : false;
    });
    if (prevId) {
      var topToNext = $('#' + prevId).position().top;

      var scrollTop = prevId !== _questions2[0].id ? topToNext - params.min + params.currentTop : 0;

      $(wrapTypeform).animate({
        scrollTop: scrollTop
      }, 200);
      params.currentTop = scrollTop;
    };
    currentIdGlobal = prevId;
    updateAnsweredQuestions();
  };
};

var goToCurrentQuestion = function goToCurrentQuestion() {
  var questions = document.querySelectorAll('#typeform .question');
  var localId = document.querySelector('#typeform .question.active').id;
  questions.forEach(function (element, index) {
    var id = element.id;
    if (id === currentIdGlobal) localId = questions[index].id;
  });

  var topToNext = $('#' + localId).position().top;

  var scrollTop = localId !== questions[0].id ? topToNext - params.min + params.currentTop : 0;

  scrollTop = localId !== questions[questions.length - 1].id ? scrollTop : wrapTypeform.scrollHeight;

  wrapTypeform.scrollTop = scrollTop;

  params.currentTop = scrollTop;
  currentIdGlobal = localId;
  updateAnsweredQuestions();
};

// Add event handler
answers.forEach(function (item) {
  // input event - validation input
  item.oninput = function () {
    var typeRegEx = item.attributes['data-regex'].value;
    var regex = getRegex(typeRegEx);
    var input = this.value;
    item.parentNode.classList.remove('valid', 'notvalid', 'empty');

    if (regex && input) {
      if (regex.test(input)) {
        item.parentNode.classList.add('valid');
        nextQueastionAble = true;
      } else {
        item.parentNode.classList.add('notvalid');
        nextQueastionAble = false;
      };
    } else if (!input) {
      item.parentNode.classList.add('empty');
      nextQueastionAble = true;
    } else if (!regex) {
      item.parentNode.classList.add('valid');
      nextQueastionAble = true;
    };
  };
  // focus event - activation input
  item.onfocus = function () {
    disableActive();
    var parent = item.parentNode;
    if (parent.parentNode.classList.contains('group')) {
      copyTitleToTop(parent.parentNode.children[0]);
      parent.classList.add('active');
      parent.parentNode.classList.add('active');
    } else {
      parent.classList.add('active');
      hideTitle();
    };
  };

  // keypress event - next question if enter, new line iif shift+enter
  item.onkeypress = function (e) {
    if (item.attributes['data-regex'].value === 'long-text') if (e.shiftKey && e.code === 'Enter') {
      var pStart = item.selectionStart;
      var pEnd = item.selectionEnd;
      var str = item.value;
      item.value = pEnd !== str.length ? str.slice(0, pStart) + str.slice(pEnd, str.length) : str.slice(0, pStart) + '\n' + str.slice(pEnd, str.length);
      item.selectionStart = pStart;
      item.selectionEnd = pStart;
    }

    if (e.code === 'Enter' && nextQueastionAble && !e.shiftKey) {
      e.preventDefault();
      goToNextQuestion();
    };
  };

  // Disable TAB event
  item.onkeydown = function (e) {
    if (e.code === 'Tab') e.preventDefault();
  };
});

var arrowUp = document.getElementById('prev-question');
arrowUp.onclick = function (_) {
  goToPrevQuestion();
};

var arrowDown = document.getElementById('next-question');

arrowDown.onclick = function (_) {
  goToNextQuestion();
};

var next = document.querySelectorAll('#typeform .question .hint-ok .next');
next.forEach(function (e) {
  e.onclick = function () {
    goToNextQuestion();
  };
});

var getRange = function getRange(min, max) {
  return [].concat(_toConsumableArray(new Array(max).keys())).slice(min, max);
};

// Focus input when scrolling
wrapTypeform.onscroll = function () {
  var range = getRange(params.min, params.max);
  params.currentTop = this.scrollTop;
  if (this.scrollTop > 0) answers.forEach(function (answer) {
    var topAnswer = $(answer).position().top;
    if (range.includes(topAnswer)) answer.focus();
  });else answers[0].focus();
};

$(wrapTypeform).hide();
